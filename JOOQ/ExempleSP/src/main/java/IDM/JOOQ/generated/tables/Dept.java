/**
 * This class is generated by jOOQ
 */
package IDM.JOOQ.generated.tables;


import IDM.JOOQ.generated.Library;
import IDM.JOOQ.generated.tables.records.DeptRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dept extends TableImpl<DeptRecord> {

    private static final long serialVersionUID = -670896091;

    /**
     * The reference instance of <code>library.dept</code>
     */
    public static final Dept DEPT = new Dept();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeptRecord> getRecordType() {
        return DeptRecord.class;
    }

    /**
     * The column <code>library.dept.deptno</code>.
     */
    public final TableField<DeptRecord, Byte> DEPTNO = createField("deptno", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>library.dept.dname</code>.
     */
    public final TableField<DeptRecord, String> DNAME = createField("dname", org.jooq.impl.SQLDataType.VARCHAR.length(14), this, "");

    /**
     * The column <code>library.dept.loc</code>.
     */
    public final TableField<DeptRecord, String> LOC = createField("loc", org.jooq.impl.SQLDataType.VARCHAR.length(13), this, "");

    /**
     * Create a <code>library.dept</code> table reference
     */
    public Dept() {
        this("dept", null);
    }

    /**
     * Create an aliased <code>library.dept</code> table reference
     */
    public Dept(String alias) {
        this(alias, DEPT);
    }

    private Dept(String alias, Table<DeptRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dept(String alias, Table<DeptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Library.LIBRARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dept as(String alias) {
        return new Dept(alias, this);
    }

    /**
     * Rename this table
     */
    public Dept rename(String name) {
        return new Dept(name, null);
    }
}
